// This file is generated by Aseman Object Creator
// https://github.com/aseman-labs/aseman-object-creator
// Command: /home/bardia/Projects/build/AsemanQtObjectCreator/Desktop_Qt_5_4_0_GCC_64bit/Debug/AsemanQtObjectCreator if=/home/bardia/Projects/Aseman/Apps/Cutegram/Cutegram/objects/types.sco of=/home/bardia/Projects/Aseman/Apps/Cutegram/Cutegram/objects/types.h template_class=/home/bardia/Projects/Aseman/Apps/Cutegram/Cutegram/objects/templates/class.template template_equals=/home/bardia/Projects/Aseman/Apps/Cutegram/Cutegram/objects/templates/equals.template template_initialize=/home/bardia/Projects/Aseman/Apps/Cutegram/Cutegram/objects/templates/initialize.template template_file=/home/bardia/Projects/Aseman/Apps/Cutegram/Cutegram/objects/templates/file.template

#ifndef TELEGRAMTHEMEOBJEC_H
#define TELEGRAMTHEMEOBJEC_H

#include "asemantools/asemanquickobject.h"
#include <QString>
#include <QColor>
#include <QFont>
#include <QQmlComponent>
#include <QPointer>

class ThemeItem : public AsemanQuickObject
{
    Q_OBJECT
    Q_PROPERTY(QString themeName READ themeName WRITE setThemeName NOTIFY themeNameChanged)
    Q_PROPERTY(QString author READ author WRITE setAuthor NOTIFY authorChanged)
    Q_PROPERTY(QString copyright READ copyright WRITE setCopyright NOTIFY copyrightChanged)
    Q_PROPERTY(QString homePage READ homePage WRITE setHomePage NOTIFY homePageChanged)
    Q_PROPERTY(QColor masterColor READ masterColor WRITE setMasterColor NOTIFY masterColorChanged)
    Q_PROPERTY(bool visualEffects READ visualEffects WRITE setVisualEffects NOTIFY visualEffectsChanged)
    Q_PROPERTY(QColor dialogListBackground READ dialogListBackground WRITE setDialogListBackground NOTIFY dialogListBackgroundChanged)
    Q_PROPERTY(QColor dialogListFontColor READ dialogListFontColor WRITE setDialogListFontColor NOTIFY dialogListFontColorChanged)
    Q_PROPERTY(QColor dialogListShadowColor READ dialogListShadowColor WRITE setDialogListShadowColor NOTIFY dialogListShadowColorChanged)
    Q_PROPERTY(QFont dialogListFont READ dialogListFont WRITE setDialogListFont NOTIFY dialogListFontChanged)
    Q_PROPERTY(qreal dialogListWidth READ dialogListWidth WRITE setDialogListWidth NOTIFY dialogListWidthChanged)
    Q_PROPERTY(bool dialogListLightIcon READ dialogListLightIcon WRITE setDialogListLightIcon NOTIFY dialogListLightIconChanged)
    Q_PROPERTY(QColor dialogListScrollColor READ dialogListScrollColor WRITE setDialogListScrollColor NOTIFY dialogListScrollColorChanged)
    Q_PROPERTY(qreal dialogListScrollWidth READ dialogListScrollWidth WRITE setDialogListScrollWidth NOTIFY dialogListScrollWidthChanged)
    Q_PROPERTY(qreal dialogListShadowWidth READ dialogListShadowWidth WRITE setDialogListShadowWidth NOTIFY dialogListShadowWidthChanged)
    Q_PROPERTY(QColor dialogListDateColor READ dialogListDateColor WRITE setDialogListDateColor NOTIFY dialogListDateColorChanged)
    Q_PROPERTY(QFont dialogListDateFont READ dialogListDateFont WRITE setDialogListDateFont NOTIFY dialogListDateFontChanged)
    Q_PROPERTY(QColor dialogListMessageColor READ dialogListMessageColor WRITE setDialogListMessageColor NOTIFY dialogListMessageColorChanged)
    Q_PROPERTY(QFont dialogListMessageFont READ dialogListMessageFont WRITE setDialogListMessageFont NOTIFY dialogListMessageFontChanged)
    Q_PROPERTY(QColor dialogPointerColor READ dialogPointerColor WRITE setDialogPointerColor NOTIFY dialogPointerColorChanged)
    Q_PROPERTY(qreal dialogPointerHeight READ dialogPointerHeight WRITE setDialogPointerHeight NOTIFY dialogPointerHeightChanged)
    Q_PROPERTY(QColor dialogListHighlightColor READ dialogListHighlightColor WRITE setDialogListHighlightColor NOTIFY dialogListHighlightColorChanged)
    Q_PROPERTY(QColor dialogListHighlightTextColor READ dialogListHighlightTextColor WRITE setDialogListHighlightTextColor NOTIFY dialogListHighlightTextColorChanged)
    Q_PROPERTY(QColor dialogListHighlightDateColor READ dialogListHighlightDateColor WRITE setDialogListHighlightDateColor NOTIFY dialogListHighlightDateColorChanged)
    Q_PROPERTY(QColor dialogListHighlightMessageColor READ dialogListHighlightMessageColor WRITE setDialogListHighlightMessageColor NOTIFY dialogListHighlightMessageColorChanged)
    Q_PROPERTY(QColor searchBarColor READ searchBarColor WRITE setSearchBarColor NOTIFY searchBarColorChanged)
    Q_PROPERTY(QColor searchBarFocusedColor READ searchBarFocusedColor WRITE setSearchBarFocusedColor NOTIFY searchBarFocusedColorChanged)
    Q_PROPERTY(QColor searchBarTextColor READ searchBarTextColor WRITE setSearchBarTextColor NOTIFY searchBarTextColorChanged)
    Q_PROPERTY(QColor searchBarPlaceholderColor READ searchBarPlaceholderColor WRITE setSearchBarPlaceholderColor NOTIFY searchBarPlaceholderColorChanged)
    Q_PROPERTY(QFont searchBarFont READ searchBarFont WRITE setSearchBarFont NOTIFY searchBarFontChanged)
    Q_PROPERTY(QColor sendFrameColor READ sendFrameColor WRITE setSendFrameColor NOTIFY sendFrameColorChanged)
    Q_PROPERTY(QColor sendFrameShadowColor READ sendFrameShadowColor WRITE setSendFrameShadowColor NOTIFY sendFrameShadowColorChanged)
    Q_PROPERTY(qreal sendFrameShadowSize READ sendFrameShadowSize WRITE setSendFrameShadowSize NOTIFY sendFrameShadowSizeChanged)
    Q_PROPERTY(bool sendFrameLightIcon READ sendFrameLightIcon WRITE setSendFrameLightIcon NOTIFY sendFrameLightIconChanged)
    Q_PROPERTY(QColor sendFrameFontColor READ sendFrameFontColor WRITE setSendFrameFontColor NOTIFY sendFrameFontColorChanged)
    Q_PROPERTY(QColor sendFrameFontHighlightColor READ sendFrameFontHighlightColor WRITE setSendFrameFontHighlightColor NOTIFY sendFrameFontHighlightColorChanged)
    Q_PROPERTY(QFont sendFrameFont READ sendFrameFont WRITE setSendFrameFont NOTIFY sendFrameFontChanged)
    Q_PROPERTY(qreal sendFrameHeight READ sendFrameHeight WRITE setSendFrameHeight NOTIFY sendFrameHeightChanged)
    Q_PROPERTY(QQmlComponent* sendButtonStyle READ sendButtonStyle WRITE setSendButtonStyle NOTIFY sendButtonStyleChanged)
    Q_PROPERTY(QColor messageIncomingColor READ messageIncomingColor WRITE setMessageIncomingColor NOTIFY messageIncomingColorChanged)
    Q_PROPERTY(QColor messageIncomingFontColor READ messageIncomingFontColor WRITE setMessageIncomingFontColor NOTIFY messageIncomingFontColorChanged)
    Q_PROPERTY(QColor messageIncomingNameColor READ messageIncomingNameColor WRITE setMessageIncomingNameColor NOTIFY messageIncomingNameColorChanged)
    Q_PROPERTY(QColor messageIncomingDateColor READ messageIncomingDateColor WRITE setMessageIncomingDateColor NOTIFY messageIncomingDateColorChanged)
    Q_PROPERTY(bool messageIncomingLightIcon READ messageIncomingLightIcon WRITE setMessageIncomingLightIcon NOTIFY messageIncomingLightIconChanged)
    Q_PROPERTY(QColor messageOutgoingColor READ messageOutgoingColor WRITE setMessageOutgoingColor NOTIFY messageOutgoingColorChanged)
    Q_PROPERTY(QColor messageOutgoingFontColor READ messageOutgoingFontColor WRITE setMessageOutgoingFontColor NOTIFY messageOutgoingFontColorChanged)
    Q_PROPERTY(QColor messageOutgoingNameColor READ messageOutgoingNameColor WRITE setMessageOutgoingNameColor NOTIFY messageOutgoingNameColorChanged)
    Q_PROPERTY(QColor messageOutgoingDateColor READ messageOutgoingDateColor WRITE setMessageOutgoingDateColor NOTIFY messageOutgoingDateColorChanged)
    Q_PROPERTY(bool messageOutgoingLightIcon READ messageOutgoingLightIcon WRITE setMessageOutgoingLightIcon NOTIFY messageOutgoingLightIconChanged)
    Q_PROPERTY(QColor messageMediaColor READ messageMediaColor WRITE setMessageMediaColor NOTIFY messageMediaColorChanged)
    Q_PROPERTY(QColor messageMediaNameColor READ messageMediaNameColor WRITE setMessageMediaNameColor NOTIFY messageMediaNameColorChanged)
    Q_PROPERTY(QColor messageMediaDateColor READ messageMediaDateColor WRITE setMessageMediaDateColor NOTIFY messageMediaDateColorChanged)
    Q_PROPERTY(bool messageMediaLightIcon READ messageMediaLightIcon WRITE setMessageMediaLightIcon NOTIFY messageMediaLightIconChanged)
    Q_PROPERTY(QColor messageAudioColor READ messageAudioColor WRITE setMessageAudioColor NOTIFY messageAudioColorChanged)
    Q_PROPERTY(QColor messageAudioNameColor READ messageAudioNameColor WRITE setMessageAudioNameColor NOTIFY messageAudioNameColorChanged)
    Q_PROPERTY(QColor messageAudioDateColor READ messageAudioDateColor WRITE setMessageAudioDateColor NOTIFY messageAudioDateColorChanged)
    Q_PROPERTY(bool messageAudioLightIcon READ messageAudioLightIcon WRITE setMessageAudioLightIcon NOTIFY messageAudioLightIconChanged)
    Q_PROPERTY(qreal messageRadius READ messageRadius WRITE setMessageRadius NOTIFY messageRadiusChanged)
    Q_PROPERTY(bool messageShadow READ messageShadow WRITE setMessageShadow NOTIFY messageShadowChanged)
    Q_PROPERTY(qreal messageShadowSize READ messageShadowSize WRITE setMessageShadowSize NOTIFY messageShadowSizeChanged)
    Q_PROPERTY(QColor messageShadowColor READ messageShadowColor WRITE setMessageShadowColor NOTIFY messageShadowColorChanged)
    Q_PROPERTY(qreal messagePointerHeight READ messagePointerHeight WRITE setMessagePointerHeight NOTIFY messagePointerHeightChanged)
    Q_PROPERTY(QColor headerColor READ headerColor WRITE setHeaderColor NOTIFY headerColorChanged)
    Q_PROPERTY(QColor headerTitleColor READ headerTitleColor WRITE setHeaderTitleColor NOTIFY headerTitleColorChanged)
    Q_PROPERTY(QFont headerTitleFont READ headerTitleFont WRITE setHeaderTitleFont NOTIFY headerTitleFontChanged)
    Q_PROPERTY(QColor headerDateColor READ headerDateColor WRITE setHeaderDateColor NOTIFY headerDateColorChanged)
    Q_PROPERTY(QFont headerDateFont READ headerDateFont WRITE setHeaderDateFont NOTIFY headerDateFontChanged)
    Q_PROPERTY(bool headerLightIcon READ headerLightIcon WRITE setHeaderLightIcon NOTIFY headerLightIconChanged)
    Q_PROPERTY(QColor headerSecretColor READ headerSecretColor WRITE setHeaderSecretColor NOTIFY headerSecretColorChanged)
    Q_PROPERTY(QColor headerSecretTitleColor READ headerSecretTitleColor WRITE setHeaderSecretTitleColor NOTIFY headerSecretTitleColorChanged)
    Q_PROPERTY(QFont headerSecretTitleFont READ headerSecretTitleFont WRITE setHeaderSecretTitleFont NOTIFY headerSecretTitleFontChanged)
    Q_PROPERTY(QColor headerSecretDateColor READ headerSecretDateColor WRITE setHeaderSecretDateColor NOTIFY headerSecretDateColorChanged)
    Q_PROPERTY(QFont headerSecretDateFont READ headerSecretDateFont WRITE setHeaderSecretDateFont NOTIFY headerSecretDateFontChanged)
    Q_PROPERTY(bool headerSecretLightIcon READ headerSecretLightIcon WRITE setHeaderSecretLightIcon NOTIFY headerSecretLightIconChanged)
    Q_PROPERTY(qreal headerHeight READ headerHeight WRITE setHeaderHeight NOTIFY headerHeightChanged)
    Q_PROPERTY(QColor panelColor READ panelColor WRITE setPanelColor NOTIFY panelColorChanged)
    Q_PROPERTY(bool panelLightIcon READ panelLightIcon WRITE setPanelLightIcon NOTIFY panelLightIconChanged)
    Q_PROPERTY(qreal panelPointerHeight READ panelPointerHeight WRITE setPanelPointerHeight NOTIFY panelPointerHeightChanged)
    Q_PROPERTY(QColor panelTooltipBackground READ panelTooltipBackground WRITE setPanelTooltipBackground NOTIFY panelTooltipBackgroundChanged)
    Q_PROPERTY(QColor panelTooltipTextColor READ panelTooltipTextColor WRITE setPanelTooltipTextColor NOTIFY panelTooltipTextColorChanged)
    Q_PROPERTY(QColor panelShadowColor READ panelShadowColor WRITE setPanelShadowColor NOTIFY panelShadowColorChanged)
    Q_PROPERTY(qreal panelShadowWidth READ panelShadowWidth WRITE setPanelShadowWidth NOTIFY panelShadowWidthChanged)
    Q_PROPERTY(QColor sidebarColor READ sidebarColor WRITE setSidebarColor NOTIFY sidebarColorChanged)
    Q_PROPERTY(QColor sidebarFontColor READ sidebarFontColor WRITE setSidebarFontColor NOTIFY sidebarFontColorChanged)
    Q_PROPERTY(QFont sidebarFont READ sidebarFont WRITE setSidebarFont NOTIFY sidebarFontChanged)
    Q_PROPERTY(QColor sidebarPhoneBackground READ sidebarPhoneBackground WRITE setSidebarPhoneBackground NOTIFY sidebarPhoneBackgroundChanged)
    Q_PROPERTY(QColor sidebarPhoneColor READ sidebarPhoneColor WRITE setSidebarPhoneColor NOTIFY sidebarPhoneColorChanged)
    Q_PROPERTY(QFont sidebarPhoneFont READ sidebarPhoneFont WRITE setSidebarPhoneFont NOTIFY sidebarPhoneFontChanged)
    Q_PROPERTY(QString menuStyleSheet READ menuStyleSheet WRITE setMenuStyleSheet NOTIFY menuStyleSheetChanged)
    Q_PROPERTY(QQmlComponent* buttonStyle READ buttonStyle WRITE setButtonStyle NOTIFY buttonStyleChanged)
    Q_PROPERTY(QQmlComponent* switchStyle READ switchStyle WRITE setSwitchStyle NOTIFY switchStyleChanged)
    Q_PROPERTY(QQmlComponent* checkBoxStyle READ checkBoxStyle WRITE setCheckBoxStyle NOTIFY checkBoxStyleChanged)
    Q_PROPERTY(QQmlComponent* comboBoxStyle READ comboBoxStyle WRITE setComboBoxStyle NOTIFY comboBoxStyleChanged)
    Q_PROPERTY(QQmlComponent* textFieldStyle READ textFieldStyle WRITE setTextFieldStyle NOTIFY textFieldStyleChanged)
    Q_PROPERTY(QQmlComponent* spinBoxStyle READ spinBoxStyle WRITE setSpinBoxStyle NOTIFY spinBoxStyleChanged)
    Q_PROPERTY(QQmlComponent* searchTextFieldStyle READ searchTextFieldStyle WRITE setSearchTextFieldStyle NOTIFY searchTextFieldStyleChanged)

public:
    ThemeItem(QObject *parent = 0) : AsemanQuickObject(parent){
        _visualEffects = true;
        _dialogListWidth = 275;
        _dialogListLightIcon = false;
        _dialogListScrollWidth = 6;
        _dialogListShadowWidth = 5;
        _dialogPointerHeight = 16;
        _sendFrameLightIcon = false;
        _sendFrameHeight = 40;
        _messageIncomingLightIcon = false;
        _messageOutgoingLightIcon = false;
        _messageMediaLightIcon = false;
        _messageAudioLightIcon = false;
        _messageRadius = 5;
        _messageShadow = true;
        _messageShadowSize = 2;
        _messagePointerHeight = 15;
        _headerLightIcon = false;
        _headerSecretLightIcon = false;
        _headerHeight = 50;
        _panelLightIcon = true;
        _panelPointerHeight = 12;
        _panelShadowWidth = 5;
    }
    ~ThemeItem(){}

    QString themeName() const {
        return _themeName;
    }

    void setThemeName(QString value) {
        if( value == _themeName )
            return;
        _themeName = value;
        emit themeNameChanged();
        emit changed();
    }

    QString author() const {
        return _author;
    }

    void setAuthor(QString value) {
        if( value == _author )
            return;
        _author = value;
        emit authorChanged();
        emit changed();
    }

    QString copyright() const {
        return _copyright;
    }

    void setCopyright(QString value) {
        if( value == _copyright )
            return;
        _copyright = value;
        emit copyrightChanged();
        emit changed();
    }

    QString homePage() const {
        return _homePage;
    }

    void setHomePage(QString value) {
        if( value == _homePage )
            return;
        _homePage = value;
        emit homePageChanged();
        emit changed();
    }

    QColor masterColor() const {
        return _masterColor;
    }

    void setMasterColor(QColor value) {
        if( value == _masterColor )
            return;
        _masterColor = value;
        emit masterColorChanged();
        emit changed();
    }

    bool visualEffects() const {
        return _visualEffects;
    }

    void setVisualEffects(bool value) {
        if( value == _visualEffects )
            return;
        _visualEffects = value;
        emit visualEffectsChanged();
        emit changed();
    }

    QColor dialogListBackground() const {
        return _dialogListBackground;
    }

    void setDialogListBackground(QColor value) {
        if( value == _dialogListBackground )
            return;
        _dialogListBackground = value;
        emit dialogListBackgroundChanged();
        emit changed();
    }

    QColor dialogListFontColor() const {
        return _dialogListFontColor;
    }

    void setDialogListFontColor(QColor value) {
        if( value == _dialogListFontColor )
            return;
        _dialogListFontColor = value;
        emit dialogListFontColorChanged();
        emit changed();
    }

    QColor dialogListShadowColor() const {
        return _dialogListShadowColor;
    }

    void setDialogListShadowColor(QColor value) {
        if( value == _dialogListShadowColor )
            return;
        _dialogListShadowColor = value;
        emit dialogListShadowColorChanged();
        emit changed();
    }

    QFont dialogListFont() const {
        return _dialogListFont;
    }

    void setDialogListFont(QFont value) {
        if( value == _dialogListFont )
            return;
        _dialogListFont = value;
        emit dialogListFontChanged();
        emit changed();
    }

    qreal dialogListWidth() const {
        return _dialogListWidth;
    }

    void setDialogListWidth(qreal value) {
        if( value == _dialogListWidth )
            return;
        _dialogListWidth = value;
        emit dialogListWidthChanged();
        emit changed();
    }

    bool dialogListLightIcon() const {
        return _dialogListLightIcon;
    }

    void setDialogListLightIcon(bool value) {
        if( value == _dialogListLightIcon )
            return;
        _dialogListLightIcon = value;
        emit dialogListLightIconChanged();
        emit changed();
    }

    QColor dialogListScrollColor() const {
        return _dialogListScrollColor;
    }

    void setDialogListScrollColor(QColor value) {
        if( value == _dialogListScrollColor )
            return;
        _dialogListScrollColor = value;
        emit dialogListScrollColorChanged();
        emit changed();
    }

    qreal dialogListScrollWidth() const {
        return _dialogListScrollWidth;
    }

    void setDialogListScrollWidth(qreal value) {
        if( value == _dialogListScrollWidth )
            return;
        _dialogListScrollWidth = value;
        emit dialogListScrollWidthChanged();
        emit changed();
    }

    qreal dialogListShadowWidth() const {
        return _dialogListShadowWidth;
    }

    void setDialogListShadowWidth(qreal value) {
        if( value == _dialogListShadowWidth )
            return;
        _dialogListShadowWidth = value;
        emit dialogListShadowWidthChanged();
        emit changed();
    }

    QColor dialogListDateColor() const {
        return _dialogListDateColor;
    }

    void setDialogListDateColor(QColor value) {
        if( value == _dialogListDateColor )
            return;
        _dialogListDateColor = value;
        emit dialogListDateColorChanged();
        emit changed();
    }

    QFont dialogListDateFont() const {
        return _dialogListDateFont;
    }

    void setDialogListDateFont(QFont value) {
        if( value == _dialogListDateFont )
            return;
        _dialogListDateFont = value;
        emit dialogListDateFontChanged();
        emit changed();
    }

    QColor dialogListMessageColor() const {
        return _dialogListMessageColor;
    }

    void setDialogListMessageColor(QColor value) {
        if( value == _dialogListMessageColor )
            return;
        _dialogListMessageColor = value;
        emit dialogListMessageColorChanged();
        emit changed();
    }

    QFont dialogListMessageFont() const {
        return _dialogListMessageFont;
    }

    void setDialogListMessageFont(QFont value) {
        if( value == _dialogListMessageFont )
            return;
        _dialogListMessageFont = value;
        emit dialogListMessageFontChanged();
        emit changed();
    }

    QColor dialogPointerColor() const {
        return _dialogPointerColor;
    }

    void setDialogPointerColor(QColor value) {
        if( value == _dialogPointerColor )
            return;
        _dialogPointerColor = value;
        emit dialogPointerColorChanged();
        emit changed();
    }

    qreal dialogPointerHeight() const {
        return _dialogPointerHeight;
    }

    void setDialogPointerHeight(qreal value) {
        if( value == _dialogPointerHeight )
            return;
        _dialogPointerHeight = value;
        emit dialogPointerHeightChanged();
        emit changed();
    }

    QColor dialogListHighlightColor() const {
        return _dialogListHighlightColor;
    }

    void setDialogListHighlightColor(QColor value) {
        if( value == _dialogListHighlightColor )
            return;
        _dialogListHighlightColor = value;
        emit dialogListHighlightColorChanged();
        emit changed();
    }

    QColor dialogListHighlightTextColor() const {
        return _dialogListHighlightTextColor;
    }

    void setDialogListHighlightTextColor(QColor value) {
        if( value == _dialogListHighlightTextColor )
            return;
        _dialogListHighlightTextColor = value;
        emit dialogListHighlightTextColorChanged();
        emit changed();
    }

    QColor dialogListHighlightDateColor() const {
        return _dialogListHighlightDateColor;
    }

    void setDialogListHighlightDateColor(QColor value) {
        if( value == _dialogListHighlightDateColor )
            return;
        _dialogListHighlightDateColor = value;
        emit dialogListHighlightDateColorChanged();
        emit changed();
    }

    QColor dialogListHighlightMessageColor() const {
        return _dialogListHighlightMessageColor;
    }

    void setDialogListHighlightMessageColor(QColor value) {
        if( value == _dialogListHighlightMessageColor )
            return;
        _dialogListHighlightMessageColor = value;
        emit dialogListHighlightMessageColorChanged();
        emit changed();
    }

    QColor searchBarColor() const {
        return _searchBarColor;
    }

    void setSearchBarColor(QColor value) {
        if( value == _searchBarColor )
            return;
        _searchBarColor = value;
        emit searchBarColorChanged();
        emit changed();
    }

    QColor searchBarFocusedColor() const {
        return _searchBarFocusedColor;
    }

    void setSearchBarFocusedColor(QColor value) {
        if( value == _searchBarFocusedColor )
            return;
        _searchBarFocusedColor = value;
        emit searchBarFocusedColorChanged();
        emit changed();
    }

    QColor searchBarTextColor() const {
        return _searchBarTextColor;
    }

    void setSearchBarTextColor(QColor value) {
        if( value == _searchBarTextColor )
            return;
        _searchBarTextColor = value;
        emit searchBarTextColorChanged();
        emit changed();
    }

    QColor searchBarPlaceholderColor() const {
        return _searchBarPlaceholderColor;
    }

    void setSearchBarPlaceholderColor(QColor value) {
        if( value == _searchBarPlaceholderColor )
            return;
        _searchBarPlaceholderColor = value;
        emit searchBarPlaceholderColorChanged();
        emit changed();
    }

    QFont searchBarFont() const {
        return _searchBarFont;
    }

    void setSearchBarFont(QFont value) {
        if( value == _searchBarFont )
            return;
        _searchBarFont = value;
        emit searchBarFontChanged();
        emit changed();
    }

    QColor sendFrameColor() const {
        return _sendFrameColor;
    }

    void setSendFrameColor(QColor value) {
        if( value == _sendFrameColor )
            return;
        _sendFrameColor = value;
        emit sendFrameColorChanged();
        emit changed();
    }

    QColor sendFrameShadowColor() const {
        return _sendFrameShadowColor;
    }

    void setSendFrameShadowColor(QColor value) {
        if( value == _sendFrameShadowColor )
            return;
        _sendFrameShadowColor = value;
        emit sendFrameShadowColorChanged();
        emit changed();
    }

    qreal sendFrameShadowSize() const {
        return _sendFrameShadowSize;
    }

    void setSendFrameShadowSize(qreal value) {
        if( value == _sendFrameShadowSize )
            return;
        _sendFrameShadowSize = value;
        emit sendFrameShadowSizeChanged();
        emit changed();
    }

    bool sendFrameLightIcon() const {
        return _sendFrameLightIcon;
    }

    void setSendFrameLightIcon(bool value) {
        if( value == _sendFrameLightIcon )
            return;
        _sendFrameLightIcon = value;
        emit sendFrameLightIconChanged();
        emit changed();
    }

    QColor sendFrameFontColor() const {
        return _sendFrameFontColor;
    }

    void setSendFrameFontColor(QColor value) {
        if( value == _sendFrameFontColor )
            return;
        _sendFrameFontColor = value;
        emit sendFrameFontColorChanged();
        emit changed();
    }

    QColor sendFrameFontHighlightColor() const {
        return _sendFrameFontHighlightColor;
    }

    void setSendFrameFontHighlightColor(QColor value) {
        if( value == _sendFrameFontHighlightColor )
            return;
        _sendFrameFontHighlightColor = value;
        emit sendFrameFontHighlightColorChanged();
        emit changed();
    }

    QFont sendFrameFont() const {
        return _sendFrameFont;
    }

    void setSendFrameFont(QFont value) {
        if( value == _sendFrameFont )
            return;
        _sendFrameFont = value;
        emit sendFrameFontChanged();
        emit changed();
    }

    qreal sendFrameHeight() const {
        return _sendFrameHeight;
    }

    void setSendFrameHeight(qreal value) {
        if( value == _sendFrameHeight )
            return;
        _sendFrameHeight = value;
        emit sendFrameHeightChanged();
        emit changed();
    }

    QQmlComponent *sendButtonStyle() const {
        return _sendButtonStyle;
    }

    void setSendButtonStyle(QQmlComponent *buttonStyle) {
        if(buttonStyle == _sendButtonStyle)
            return;
        _sendButtonStyle = buttonStyle;
        emit sendButtonStyleChanged();
        emit changed();
    }

    QColor messageIncomingColor() const {
        return _messageIncomingColor;
    }

    void setMessageIncomingColor(QColor value) {
        if( value == _messageIncomingColor )
            return;
        _messageIncomingColor = value;
        emit messageIncomingColorChanged();
        emit changed();
    }

    QColor messageIncomingFontColor() const {
        return _messageIncomingFontColor;
    }

    void setMessageIncomingFontColor(QColor value) {
        if( value == _messageIncomingFontColor )
            return;
        _messageIncomingFontColor = value;
        emit messageIncomingFontColorChanged();
        emit changed();
    }

    QColor messageIncomingNameColor() const {
        return _messageIncomingNameColor;
    }

    void setMessageIncomingNameColor(QColor value) {
        if( value == _messageIncomingNameColor )
            return;
        _messageIncomingNameColor = value;
        emit messageIncomingNameColorChanged();
        emit changed();
    }

    QColor messageIncomingDateColor() const {
        return _messageIncomingDateColor;
    }

    void setMessageIncomingDateColor(QColor value) {
        if( value == _messageIncomingDateColor )
            return;
        _messageIncomingDateColor = value;
        emit messageIncomingDateColorChanged();
        emit changed();
    }

    bool messageIncomingLightIcon() const {
        return _messageIncomingLightIcon;
    }

    void setMessageIncomingLightIcon(bool value) {
        if( value == _messageIncomingLightIcon )
            return;
        _messageIncomingLightIcon = value;
        emit messageIncomingLightIconChanged();
        emit changed();
    }

    QColor messageOutgoingColor() const {
        return _messageOutgoingColor;
    }

    void setMessageOutgoingColor(QColor value) {
        if( value == _messageOutgoingColor )
            return;
        _messageOutgoingColor = value;
        emit messageOutgoingColorChanged();
        emit changed();
    }

    QColor messageOutgoingFontColor() const {
        return _messageOutgoingFontColor;
    }

    void setMessageOutgoingFontColor(QColor value) {
        if( value == _messageOutgoingFontColor )
            return;
        _messageOutgoingFontColor = value;
        emit messageOutgoingFontColorChanged();
        emit changed();
    }

    QColor messageOutgoingNameColor() const {
        return _messageOutgoingNameColor;
    }

    void setMessageOutgoingNameColor(QColor value) {
        if( value == _messageOutgoingNameColor )
            return;
        _messageOutgoingNameColor = value;
        emit messageOutgoingNameColorChanged();
        emit changed();
    }

    QColor messageOutgoingDateColor() const {
        return _messageOutgoingDateColor;
    }

    void setMessageOutgoingDateColor(QColor value) {
        if( value == _messageOutgoingDateColor )
            return;
        _messageOutgoingDateColor = value;
        emit messageOutgoingDateColorChanged();
        emit changed();
    }

    bool messageOutgoingLightIcon() const {
        return _messageOutgoingLightIcon;
    }

    void setMessageOutgoingLightIcon(bool value) {
        if( value == _messageOutgoingLightIcon )
            return;
        _messageOutgoingLightIcon = value;
        emit messageOutgoingLightIconChanged();
        emit changed();
    }

    QColor messageMediaColor() const {
        return _messageMediaColor;
    }

    void setMessageMediaColor(QColor value) {
        if( value == _messageMediaColor )
            return;
        _messageMediaColor = value;
        emit messageMediaColorChanged();
        emit changed();
    }

    QColor messageMediaNameColor() const {
        return _messageMediaNameColor;
    }

    void setMessageMediaNameColor(QColor value) {
        if( value == _messageMediaNameColor )
            return;
        _messageMediaNameColor = value;
        emit messageMediaNameColorChanged();
        emit changed();
    }

    QColor messageMediaDateColor() const {
        return _messageMediaDateColor;
    }

    void setMessageMediaDateColor(QColor value) {
        if( value == _messageMediaDateColor )
            return;
        _messageMediaDateColor = value;
        emit messageMediaDateColorChanged();
        emit changed();
    }

    bool messageMediaLightIcon() const {
        return _messageMediaLightIcon;
    }

    void setMessageMediaLightIcon(bool value) {
        if( value == _messageMediaLightIcon )
            return;
        _messageMediaLightIcon = value;
        emit messageMediaLightIconChanged();
        emit changed();
    }

    QColor messageAudioColor() const {
        return _messageAudioColor;
    }

    void setMessageAudioColor(QColor value) {
        if( value == _messageAudioColor )
            return;
        _messageAudioColor = value;
        emit messageAudioColorChanged();
        emit changed();
    }

    QColor messageAudioNameColor() const {
        return _messageAudioNameColor;
    }

    void setMessageAudioNameColor(QColor value) {
        if( value == _messageAudioNameColor )
            return;
        _messageAudioNameColor = value;
        emit messageAudioNameColorChanged();
        emit changed();
    }

    QColor messageAudioDateColor() const {
        return _messageAudioDateColor;
    }

    void setMessageAudioDateColor(QColor value) {
        if( value == _messageAudioDateColor )
            return;
        _messageAudioDateColor = value;
        emit messageAudioDateColorChanged();
        emit changed();
    }

    bool messageAudioLightIcon() const {
        return _messageAudioLightIcon;
    }

    void setMessageAudioLightIcon(bool value) {
        if( value == _messageAudioLightIcon )
            return;
        _messageAudioLightIcon = value;
        emit messageAudioLightIconChanged();
        emit changed();
    }

    qreal messageRadius() const {
        return _messageRadius;
    }

    void setMessageRadius(qreal value) {
        if( value == _messageRadius )
            return;
        _messageRadius = value;
        emit messageRadiusChanged();
        emit changed();
    }

    bool messageShadow() const {
        return _messageShadow;
    }

    void setMessageShadow(bool value) {
        if( value == _messageShadow )
            return;
        _messageShadow = value;
        emit messageShadowChanged();
        emit changed();
    }

    qreal messageShadowSize() const {
        return _messageShadowSize;
    }

    void setMessageShadowSize(qreal value) {
        if( value == _messageShadowSize )
            return;
        _messageShadowSize = value;
        emit messageShadowSizeChanged();
        emit changed();
    }

    QColor messageShadowColor() const {
        return _messageShadowColor;
    }

    void setMessageShadowColor(QColor value) {
        if( value == _messageShadowColor )
            return;
        _messageShadowColor = value;
        emit messageShadowColorChanged();
        emit changed();
    }

    qreal messagePointerHeight() const {
        return _messagePointerHeight;
    }

    void setMessagePointerHeight(qreal value) {
        if( value == _messagePointerHeight )
            return;
        _messagePointerHeight = value;
        emit messagePointerHeightChanged();
        emit changed();
    }

    QColor headerColor() const {
        return _headerColor;
    }

    void setHeaderColor(QColor value) {
        if( value == _headerColor )
            return;
        _headerColor = value;
        emit headerColorChanged();
        emit changed();
    }

    QColor headerTitleColor() const {
        return _headerTitleColor;
    }

    void setHeaderTitleColor(QColor value) {
        if( value == _headerTitleColor )
            return;
        _headerTitleColor = value;
        emit headerTitleColorChanged();
        emit changed();
    }

    QFont headerTitleFont() const {
        return _headerTitleFont;
    }

    void setHeaderTitleFont(QFont value) {
        if( value == _headerTitleFont )
            return;
        _headerTitleFont = value;
        emit headerTitleFontChanged();
        emit changed();
    }

    QColor headerDateColor() const {
        return _headerDateColor;
    }

    void setHeaderDateColor(QColor value) {
        if( value == _headerDateColor )
            return;
        _headerDateColor = value;
        emit headerDateColorChanged();
        emit changed();
    }

    QFont headerDateFont() const {
        return _headerDateFont;
    }

    void setHeaderDateFont(QFont value) {
        if( value == _headerDateFont )
            return;
        _headerDateFont = value;
        emit headerDateFontChanged();
        emit changed();
    }

    bool headerLightIcon() const {
        return _headerLightIcon;
    }

    void setHeaderLightIcon(bool value) {
        if( value == _headerLightIcon )
            return;
        _headerLightIcon = value;
        emit headerLightIconChanged();
        emit changed();
    }

    QColor headerSecretColor() const {
        return _headerSecretColor;
    }

    void setHeaderSecretColor(QColor value) {
        if( value == _headerSecretColor )
            return;
        _headerSecretColor = value;
        emit headerSecretColorChanged();
        emit changed();
    }

    QColor headerSecretTitleColor() const {
        return _headerSecretTitleColor;
    }

    void setHeaderSecretTitleColor(QColor value) {
        if( value == _headerSecretTitleColor )
            return;
        _headerSecretTitleColor = value;
        emit headerSecretTitleColorChanged();
        emit changed();
    }

    QFont headerSecretTitleFont() const {
        return _headerSecretTitleFont;
    }

    void setHeaderSecretTitleFont(QFont value) {
        if( value == _headerSecretTitleFont )
            return;
        _headerSecretTitleFont = value;
        emit headerSecretTitleFontChanged();
        emit changed();
    }

    QColor headerSecretDateColor() const {
        return _headerSecretDateColor;
    }

    void setHeaderSecretDateColor(QColor value) {
        if( value == _headerSecretDateColor )
            return;
        _headerSecretDateColor = value;
        emit headerSecretDateColorChanged();
        emit changed();
    }

    QFont headerSecretDateFont() const {
        return _headerSecretDateFont;
    }

    void setHeaderSecretDateFont(QFont value) {
        if( value == _headerSecretDateFont )
            return;
        _headerSecretDateFont = value;
        emit headerSecretDateFontChanged();
        emit changed();
    }

    bool headerSecretLightIcon() const {
        return _headerSecretLightIcon;
    }

    void setHeaderSecretLightIcon(bool value) {
        if( value == _headerSecretLightIcon )
            return;
        _headerSecretLightIcon = value;
        emit headerSecretLightIconChanged();
        emit changed();
    }

    qreal headerHeight() const {
        return _headerHeight;
    }

    void setHeaderHeight(qreal value) {
        if( value == _headerHeight )
            return;
        _headerHeight = value;
        emit headerHeightChanged();
        emit changed();
    }

    QColor panelColor() const {
        return _panelColor;
    }

    void setPanelColor(QColor value) {
        if( value == _panelColor )
            return;
        _panelColor = value;
        emit panelColorChanged();
        emit changed();
    }

    bool panelLightIcon() const {
        return _panelLightIcon;
    }

    void setPanelLightIcon(bool value) {
        if( value == _panelLightIcon )
            return;
        _panelLightIcon = value;
        emit panelLightIconChanged();
        emit changed();
    }

    qreal panelPointerHeight() const {
        return _panelPointerHeight;
    }

    void setPanelPointerHeight(qreal value) {
        if( value == _panelPointerHeight )
            return;
        _panelPointerHeight = value;
        emit panelPointerHeightChanged();
        emit changed();
    }

    QColor panelTooltipBackground() const {
        return _panelTooltipBackground;
    }

    void setPanelTooltipBackground(QColor value) {
        if( value == _panelTooltipBackground )
            return;
        _panelTooltipBackground = value;
        emit panelTooltipBackgroundChanged();
        emit changed();
    }

    QColor panelTooltipTextColor() const {
        return _panelTooltipTextColor;
    }

    void setPanelTooltipTextColor(QColor value) {
        if( value == _panelTooltipTextColor )
            return;
        _panelTooltipTextColor = value;
        emit panelTooltipTextColorChanged();
        emit changed();
    }

    QColor panelShadowColor() const {
        return _panelShadowColor;
    }

    void setPanelShadowColor(QColor value) {
        if( value == _panelShadowColor )
            return;
        _panelShadowColor = value;
        emit panelShadowColorChanged();
        emit changed();
    }

    qreal panelShadowWidth() const {
        return _panelShadowWidth;
    }

    void setPanelShadowWidth(qreal value) {
        if( value == _panelShadowWidth )
            return;
        _panelShadowWidth = value;
        emit panelShadowWidthChanged();
        emit changed();
    }

    QColor sidebarColor() const {
        return _sidebarColor;
    }

    void setSidebarColor(QColor value) {
        if( value == _sidebarColor )
            return;
        _sidebarColor = value;
        emit sidebarColorChanged();
        emit changed();
    }

    QColor sidebarFontColor() const {
        return _sidebarFontColor;
    }

    void setSidebarFontColor(QColor value) {
        if( value == _sidebarFontColor )
            return;
        _sidebarFontColor = value;
        emit sidebarFontColorChanged();
        emit changed();
    }

    QFont sidebarFont() const {
        return _sidebarFont;
    }

    void setSidebarFont(QFont value) {
        if( value == _sidebarFont )
            return;
        _sidebarFont = value;
        emit sidebarFontChanged();
        emit changed();
    }

    QColor sidebarPhoneBackground() const {
        return _sidebarPhoneBackground;
    }

    void setSidebarPhoneBackground(QColor value) {
        if( value == _sidebarPhoneBackground )
            return;
        _sidebarPhoneBackground = value;
        emit sidebarPhoneBackgroundChanged();
        emit changed();
    }

    QColor sidebarPhoneColor() const {
        return _sidebarPhoneColor;
    }

    void setSidebarPhoneColor(QColor value) {
        if( value == _sidebarPhoneColor )
            return;
        _sidebarPhoneColor = value;
        emit sidebarPhoneColorChanged();
        emit changed();
    }

    QFont sidebarPhoneFont() const {
        return _sidebarPhoneFont;
    }

    void setSidebarPhoneFont(QFont value) {
        if( value == _sidebarPhoneFont )
            return;
        _sidebarPhoneFont = value;
        emit sidebarPhoneFontChanged();
        emit changed();
    }

    QString menuStyleSheet() const {
        return _menuStyleSheet;
    }

    void setMenuStyleSheet(const QString &menuStyleSheet) {
        if(menuStyleSheet == _menuStyleSheet)
            return;
        _menuStyleSheet = menuStyleSheet;
        emit menuStyleSheetChanged();
        emit changed();
    }

    QQmlComponent *buttonStyle() const {
        return _buttonStyle;
    }

    void setButtonStyle(QQmlComponent *buttonStyle) {
        if(buttonStyle == _buttonStyle)
            return;
        _buttonStyle = buttonStyle;
        emit buttonStyleChanged();
        emit changed();
    }

    QQmlComponent *switchStyle() const {
        return _switchStyle;
    }

    void setSwitchStyle(QQmlComponent *switchStyle) {
        if(switchStyle == _switchStyle)
            return;
        _switchStyle = switchStyle;
        emit switchStyleChanged();
        emit changed();
    }

    QQmlComponent *checkBoxStyle() const {
        return _checkBoxStyle;
    }

    void setCheckBoxStyle(QQmlComponent *checkBoxStyle) {
        if(checkBoxStyle == _checkBoxStyle)
            return;
        _checkBoxStyle = checkBoxStyle;
        emit checkBoxStyleChanged();
        emit changed();
    }

    QQmlComponent *comboBoxStyle() const {
        return _comboBoxStyle;
    }

    void setComboBoxStyle(QQmlComponent *comboBoxStyle) {
        if(comboBoxStyle == _comboBoxStyle)
            return;
        _comboBoxStyle = comboBoxStyle;
        emit comboBoxStyleChanged();
        emit changed();
    }

    QQmlComponent *textFieldStyle() const {
        return _textFieldStyle;
    }

    void setTextFieldStyle(QQmlComponent *textFieldStyle) {
        if(textFieldStyle == _textFieldStyle)
            return;
        _textFieldStyle = textFieldStyle;
        emit textFieldStyleChanged();
        emit changed();
    }

    QQmlComponent *spinBoxStyle() const {
        return _spinBoxStyle;
    }

    void setSpinBoxStyle(QQmlComponent *spinBoxStyle) {
        if(spinBoxStyle == _spinBoxStyle)
            return;
        _spinBoxStyle = spinBoxStyle;
        emit spinBoxStyleChanged();
        emit changed();
    }

    QQmlComponent *searchTextFieldStyle() const
    {
        return _searchTextFieldStyle;
    }

    void setSearchTextFieldStyle(QQmlComponent *searchTextFieldStyle)
    {
        if(searchTextFieldStyle == _searchTextFieldStyle)
            return;
        _searchTextFieldStyle = searchTextFieldStyle;
        emit searchTextFieldStyleChanged();
        emit changed();
    }

    void operator= ( ThemeItem *another) {
        _themeName = another->themeName();
        _author = another->author();
        _copyright = another->copyright();
        _homePage = another->homePage();
        _masterColor = another->masterColor();
        _visualEffects = another->visualEffects();
        _dialogListBackground = another->dialogListBackground();
        _dialogListFontColor = another->dialogListFontColor();
        _dialogListShadowColor = another->dialogListShadowColor();
        _dialogListFont = another->dialogListFont();
        _dialogListWidth = another->dialogListWidth();
        _dialogListLightIcon = another->dialogListLightIcon();
        _dialogListScrollColor = another->dialogListScrollColor();
        _dialogListScrollWidth = another->dialogListScrollWidth();
        _dialogListShadowWidth = another->dialogListShadowWidth();
        _dialogListDateColor = another->dialogListDateColor();
        _dialogListDateFont = another->dialogListDateFont();
        _dialogListMessageColor = another->dialogListMessageColor();
        _dialogListMessageFont = another->dialogListMessageFont();
        _dialogPointerColor = another->dialogPointerColor();
        _dialogPointerHeight = another->dialogPointerHeight();
        _dialogListHighlightColor = another->dialogListHighlightColor();
        _dialogListHighlightTextColor = another->dialogListHighlightTextColor();
        _dialogListHighlightDateColor = another->dialogListHighlightDateColor();
        _dialogListHighlightMessageColor = another->dialogListHighlightMessageColor();
        _searchBarColor = another->searchBarColor();
        _searchBarFocusedColor = another->searchBarFocusedColor();
        _searchBarTextColor = another->searchBarTextColor();
        _searchBarPlaceholderColor = another->searchBarPlaceholderColor();
        _searchBarFont = another->searchBarFont();
        _sendFrameColor = another->sendFrameColor();
        _sendFrameShadowColor = another->sendFrameShadowColor();
        _sendFrameShadowSize = another->sendFrameShadowSize();
        _sendFrameLightIcon = another->sendFrameLightIcon();
        _sendFrameFontColor = another->sendFrameFontColor();
        _sendFrameFontHighlightColor = another->sendFrameFontHighlightColor();
        _sendFrameFont = another->sendFrameFont();
        _sendFrameHeight = another->sendFrameHeight();
        _messageIncomingColor = another->messageIncomingColor();
        _messageIncomingFontColor = another->messageIncomingFontColor();
        _messageIncomingNameColor = another->messageIncomingNameColor();
        _messageIncomingDateColor = another->messageIncomingDateColor();
        _messageIncomingLightIcon = another->messageIncomingLightIcon();
        _messageOutgoingColor = another->messageOutgoingColor();
        _messageOutgoingFontColor = another->messageOutgoingFontColor();
        _messageOutgoingNameColor = another->messageOutgoingNameColor();
        _messageOutgoingDateColor = another->messageOutgoingDateColor();
        _messageOutgoingLightIcon = another->messageOutgoingLightIcon();
        _messageMediaColor = another->messageMediaColor();
        _messageMediaNameColor = another->messageMediaNameColor();
        _messageMediaDateColor = another->messageMediaDateColor();
        _messageMediaLightIcon = another->messageMediaLightIcon();
        _messageAudioColor = another->messageAudioColor();
        _messageAudioNameColor = another->messageAudioNameColor();
        _messageAudioDateColor = another->messageAudioDateColor();
        _messageAudioLightIcon = another->messageAudioLightIcon();
        _messageRadius = another->messageRadius();
        _messageShadow = another->messageShadow();
        _messageShadowSize = another->messageShadowSize();
        _messageShadowColor = another->messageShadowColor();
        _messagePointerHeight = another->messagePointerHeight();
        _headerColor = another->headerColor();
        _headerTitleColor = another->headerTitleColor();
        _headerTitleFont = another->headerTitleFont();
        _headerDateColor = another->headerDateColor();
        _headerDateFont = another->headerDateFont();
        _headerLightIcon = another->headerLightIcon();
        _headerSecretColor = another->headerSecretColor();
        _headerSecretTitleColor = another->headerSecretTitleColor();
        _headerSecretTitleFont = another->headerSecretTitleFont();
        _headerSecretDateColor = another->headerSecretDateColor();
        _headerSecretDateFont = another->headerSecretDateFont();
        _headerSecretLightIcon = another->headerSecretLightIcon();
        _headerHeight = another->headerHeight();
        _panelColor = another->panelColor();
        _panelLightIcon = another->panelLightIcon();
        _panelPointerHeight = another->panelPointerHeight();
        _panelTooltipBackground = another->panelTooltipBackground();
        _panelTooltipTextColor = another->panelTooltipTextColor();
        _panelShadowColor = another->panelShadowColor();
        _panelShadowWidth = another->panelShadowWidth();
        _sidebarColor = another->sidebarColor();
        _sidebarFontColor = another->sidebarFontColor();
        _sidebarFont = another->sidebarFont();
        _sidebarPhoneBackground = another->sidebarPhoneBackground();
        _sidebarPhoneColor = another->sidebarPhoneColor();
        _sidebarPhoneFont = another->sidebarPhoneFont();
        _menuStyleSheet = another->menuStyleSheet();
        _buttonStyle = another->buttonStyle();
        _switchStyle = another->switchStyle();
        _checkBoxStyle = another->checkBoxStyle();
        _comboBoxStyle = another->comboBoxStyle();
        _textFieldStyle = another->textFieldStyle();
        _searchTextFieldStyle = another->searchTextFieldStyle();
        _spinBoxStyle = another->spinBoxStyle();
        _searchTextFieldStyle = another->searchTextFieldStyle();
    }

signals:
    void changed();
    void themeNameChanged();
    void authorChanged();
    void copyrightChanged();
    void homePageChanged();
    void masterColorChanged();
    void visualEffectsChanged();
    void dialogListBackgroundChanged();
    void dialogListFontColorChanged();
    void dialogListShadowColorChanged();
    void dialogListFontChanged();
    void dialogListWidthChanged();
    void dialogListLightIconChanged();
    void dialogListScrollColorChanged();
    void dialogListScrollWidthChanged();
    void dialogListShadowWidthChanged();
    void dialogListDateColorChanged();
    void dialogListDateFontChanged();
    void dialogListMessageColorChanged();
    void dialogListMessageFontChanged();
    void dialogPointerColorChanged();
    void dialogPointerHeightChanged();
    void dialogListHighlightColorChanged();
    void dialogListHighlightTextColorChanged();
    void dialogListHighlightDateColorChanged();
    void dialogListHighlightMessageColorChanged();
    void searchBarColorChanged();
    void searchBarFocusedColorChanged();
    void searchBarTextColorChanged();
    void searchBarPlaceholderColorChanged();
    void searchBarFontChanged();
    void sendFrameColorChanged();
    void sendFrameShadowColorChanged();
    void sendFrameShadowSizeChanged();
    void sendFrameLightIconChanged();
    void sendFrameFontColorChanged();
    void sendFrameFontHighlightColorChanged();
    void sendFrameFontChanged();
    void sendFrameHeightChanged();
    void sendButtonStyleChanged();
    void messageIncomingColorChanged();
    void messageIncomingFontColorChanged();
    void messageIncomingNameColorChanged();
    void messageIncomingDateColorChanged();
    void messageIncomingLightIconChanged();
    void messageOutgoingColorChanged();
    void messageOutgoingFontColorChanged();
    void messageOutgoingNameColorChanged();
    void messageOutgoingDateColorChanged();
    void messageOutgoingLightIconChanged();
    void messageMediaColorChanged();
    void messageMediaNameColorChanged();
    void messageMediaDateColorChanged();
    void messageMediaLightIconChanged();
    void messageAudioColorChanged();
    void messageAudioNameColorChanged();
    void messageAudioDateColorChanged();
    void messageAudioLightIconChanged();
    void messageRadiusChanged();
    void messageShadowChanged();
    void messageShadowSizeChanged();
    void messageShadowColorChanged();
    void messagePointerHeightChanged();
    void headerColorChanged();
    void headerTitleColorChanged();
    void headerTitleFontChanged();
    void headerDateColorChanged();
    void headerDateFontChanged();
    void headerLightIconChanged();
    void headerSecretColorChanged();
    void headerSecretTitleColorChanged();
    void headerSecretTitleFontChanged();
    void headerSecretDateColorChanged();
    void headerSecretDateFontChanged();
    void headerSecretLightIconChanged();
    void headerHeightChanged();
    void panelColorChanged();
    void panelLightIconChanged();
    void panelPointerHeightChanged();
    void panelTooltipBackgroundChanged();
    void panelTooltipTextColorChanged();
    void panelShadowColorChanged();
    void panelShadowWidthChanged();
    void sidebarColorChanged();
    void sidebarFontColorChanged();
    void sidebarFontChanged();
    void sidebarPhoneBackgroundChanged();
    void sidebarPhoneColorChanged();
    void sidebarPhoneFontChanged();
    void menuStyleSheetChanged();
    void buttonStyleChanged();
    void switchStyleChanged();
    void checkBoxStyleChanged();
    void comboBoxStyleChanged();
    void textFieldStyleChanged();
    void spinBoxStyleChanged();
    void searchTextFieldStyleChanged();

private:
    QString _themeName;
    QString _author;
    QString _copyright;
    QString _homePage;
    QColor _masterColor;
    bool _visualEffects;
    QColor _dialogListBackground;
    QColor _dialogListFontColor;
    QColor _dialogListShadowColor;
    QFont _dialogListFont;
    qreal _dialogListWidth;
    bool _dialogListLightIcon;
    QColor _dialogListScrollColor;
    qreal _dialogListScrollWidth;
    qreal _dialogListShadowWidth;
    QColor _dialogListDateColor;
    QFont _dialogListDateFont;
    QColor _dialogListMessageColor;
    QFont _dialogListMessageFont;
    QColor _dialogPointerColor;
    qreal _dialogPointerHeight;
    QColor _dialogListHighlightColor;
    QColor _dialogListHighlightTextColor;
    QColor _dialogListHighlightDateColor;
    QColor _dialogListHighlightMessageColor;
    QColor _searchBarColor;
    QColor _searchBarFocusedColor;
    QColor _searchBarTextColor;
    QColor _searchBarPlaceholderColor;
    QFont _searchBarFont;
    QColor _sendFrameColor;
    QColor _sendFrameShadowColor;
    qreal _sendFrameShadowSize;
    bool _sendFrameLightIcon;
    QColor _sendFrameFontColor;
    QColor _sendFrameFontHighlightColor;
    QFont _sendFrameFont;
    qreal _sendFrameHeight;
    QColor _messageIncomingColor;
    QColor _messageIncomingFontColor;
    QColor _messageIncomingNameColor;
    QColor _messageIncomingDateColor;
    bool _messageIncomingLightIcon;
    QColor _messageOutgoingColor;
    QColor _messageOutgoingFontColor;
    QColor _messageOutgoingNameColor;
    QColor _messageOutgoingDateColor;
    bool _messageOutgoingLightIcon;
    QColor _messageMediaColor;
    QColor _messageMediaNameColor;
    QColor _messageMediaDateColor;
    bool _messageMediaLightIcon;
    QColor _messageAudioColor;
    QColor _messageAudioNameColor;
    QColor _messageAudioDateColor;
    bool _messageAudioLightIcon;
    qreal _messageRadius;
    bool _messageShadow;
    qreal _messageShadowSize;
    QColor _messageShadowColor;
    qreal _messagePointerHeight;
    QColor _headerColor;
    QColor _headerTitleColor;
    QFont _headerTitleFont;
    QColor _headerDateColor;
    QFont _headerDateFont;
    bool _headerLightIcon;
    QColor _headerSecretColor;
    QColor _headerSecretTitleColor;
    QFont _headerSecretTitleFont;
    QColor _headerSecretDateColor;
    QFont _headerSecretDateFont;
    bool _headerSecretLightIcon;
    qreal _headerHeight;
    QColor _panelColor;
    bool _panelLightIcon;
    qreal _panelPointerHeight;
    QColor _panelTooltipBackground;
    QColor _panelTooltipTextColor;
    QColor _panelShadowColor;
    qreal _panelShadowWidth;
    QColor _sidebarColor;
    QColor _sidebarFontColor;
    QFont _sidebarFont;
    QColor _sidebarPhoneBackground;
    QColor _sidebarPhoneColor;
    QFont _sidebarPhoneFont;
    QString _menuStyleSheet;
    QPointer<QQmlComponent> _buttonStyle;
    QPointer<QQmlComponent> _switchStyle;
    QPointer<QQmlComponent> _checkBoxStyle;
    QPointer<QQmlComponent> _comboBoxStyle;
    QPointer<QQmlComponent> _textFieldStyle;
    QPointer<QQmlComponent> _searchTextFieldStyle;
    QPointer<QQmlComponent> _spinBoxStyle;
    QPointer<QQmlComponent> _sendButtonStyle;
};

#endif
